# Generated from ./Jander.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,266,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,4,0,37,8,0,11,0,12,0,38,
        1,0,1,0,1,1,1,1,5,1,45,8,1,10,1,12,1,48,9,1,1,1,1,1,1,1,1,1,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,3,2,187,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,195,8,3,
        1,4,1,4,5,4,199,8,4,10,4,12,4,202,9,4,1,5,1,5,5,5,206,8,5,10,5,12,
        5,209,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,
        6,224,8,6,1,7,1,7,1,8,3,8,229,8,8,1,8,4,8,232,8,8,11,8,12,8,233,
        1,9,3,9,237,8,9,1,9,4,9,240,8,9,11,9,12,9,241,1,9,1,9,4,9,246,8,
        9,11,9,12,9,247,3,9,250,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,
        13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,2,46,207,0,17,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,1,0,5,3,0,9,10,13,13,32,32,2,0,65,90,97,122,3,0,48,57,
        65,90,97,122,3,0,42,43,45,45,47,47,2,0,43,43,45,45,303,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,1,36,1,0,0,0,3,42,1,0,0,0,5,186,1,0,0,0,7,194,1,0,0,0,
        9,196,1,0,0,0,11,203,1,0,0,0,13,223,1,0,0,0,15,225,1,0,0,0,17,228,
        1,0,0,0,19,236,1,0,0,0,21,251,1,0,0,0,23,253,1,0,0,0,25,255,1,0,
        0,0,27,257,1,0,0,0,29,259,1,0,0,0,31,262,1,0,0,0,33,264,1,0,0,0,
        35,37,7,0,0,0,36,35,1,0,0,0,37,38,1,0,0,0,38,36,1,0,0,0,38,39,1,
        0,0,0,39,40,1,0,0,0,40,41,6,0,0,0,41,2,1,0,0,0,42,46,5,123,0,0,43,
        45,9,0,0,0,44,43,1,0,0,0,45,48,1,0,0,0,46,47,1,0,0,0,46,44,1,0,0,
        0,47,49,1,0,0,0,48,46,1,0,0,0,49,50,5,125,0,0,50,51,1,0,0,0,51,52,
        6,1,0,0,52,4,1,0,0,0,53,54,5,97,0,0,54,55,5,108,0,0,55,56,5,103,
        0,0,56,57,5,111,0,0,57,58,5,114,0,0,58,59,5,105,0,0,59,60,5,116,
        0,0,60,61,5,109,0,0,61,187,5,111,0,0,62,63,5,102,0,0,63,64,5,105,
        0,0,64,65,5,109,0,0,65,66,5,95,0,0,66,67,5,97,0,0,67,68,5,108,0,
        0,68,69,5,103,0,0,69,70,5,111,0,0,70,71,5,114,0,0,71,72,5,105,0,
        0,72,73,5,116,0,0,73,74,5,109,0,0,74,187,5,111,0,0,75,76,5,100,0,
        0,76,77,5,101,0,0,77,78,5,99,0,0,78,79,5,108,0,0,79,80,5,97,0,0,
        80,81,5,114,0,0,81,187,5,101,0,0,82,83,5,108,0,0,83,84,5,101,0,0,
        84,85,5,105,0,0,85,187,5,97,0,0,86,87,5,101,0,0,87,88,5,115,0,0,
        88,89,5,99,0,0,89,90,5,114,0,0,90,91,5,101,0,0,91,92,5,118,0,0,92,
        187,5,97,0,0,93,94,5,105,0,0,94,95,5,110,0,0,95,96,5,116,0,0,96,
        97,5,101,0,0,97,98,5,105,0,0,98,99,5,114,0,0,99,187,5,111,0,0,100,
        101,5,108,0,0,101,102,5,105,0,0,102,103,5,116,0,0,103,104,5,101,
        0,0,104,105,5,114,0,0,105,106,5,97,0,0,106,187,5,108,0,0,107,108,
        5,114,0,0,108,109,5,101,0,0,109,110,5,97,0,0,110,187,5,108,0,0,111,
        112,5,108,0,0,112,113,5,111,0,0,113,114,5,103,0,0,114,115,5,105,
        0,0,115,116,5,99,0,0,116,187,5,111,0,0,117,118,5,115,0,0,118,187,
        5,101,0,0,119,120,5,101,0,0,120,121,5,110,0,0,121,122,5,116,0,0,
        122,123,5,97,0,0,123,187,5,111,0,0,124,125,5,102,0,0,125,126,5,105,
        0,0,126,127,5,109,0,0,127,128,5,95,0,0,128,129,5,115,0,0,129,187,
        5,101,0,0,130,131,5,99,0,0,131,132,5,97,0,0,132,133,5,115,0,0,133,
        187,5,111,0,0,134,135,5,115,0,0,135,136,5,101,0,0,136,137,5,110,
        0,0,137,138,5,97,0,0,138,187,5,111,0,0,139,140,5,102,0,0,140,141,
        5,105,0,0,141,142,5,109,0,0,142,143,5,95,0,0,143,144,5,99,0,0,144,
        145,5,97,0,0,145,146,5,115,0,0,146,187,5,111,0,0,147,148,5,112,0,
        0,148,149,5,97,0,0,149,150,5,114,0,0,150,187,5,97,0,0,151,152,5,
        102,0,0,152,153,5,97,0,0,153,154,5,99,0,0,154,187,5,97,0,0,155,156,
        5,102,0,0,156,157,5,105,0,0,157,158,5,109,0,0,158,159,5,95,0,0,159,
        160,5,112,0,0,160,161,5,97,0,0,161,162,5,114,0,0,162,187,5,97,0,
        0,163,164,5,101,0,0,164,165,5,110,0,0,165,166,5,113,0,0,166,167,
        5,117,0,0,167,168,5,97,0,0,168,169,5,110,0,0,169,170,5,116,0,0,170,
        187,5,111,0,0,171,172,5,102,0,0,172,173,5,105,0,0,173,174,5,109,
        0,0,174,175,5,95,0,0,175,176,5,101,0,0,176,177,5,110,0,0,177,178,
        5,113,0,0,178,179,5,117,0,0,179,180,5,97,0,0,180,181,5,110,0,0,181,
        182,5,116,0,0,182,187,5,111,0,0,183,184,5,97,0,0,184,185,5,116,0,
        0,185,187,5,101,0,0,186,53,1,0,0,0,186,62,1,0,0,0,186,75,1,0,0,0,
        186,82,1,0,0,0,186,86,1,0,0,0,186,93,1,0,0,0,186,100,1,0,0,0,186,
        107,1,0,0,0,186,111,1,0,0,0,186,117,1,0,0,0,186,119,1,0,0,0,186,
        124,1,0,0,0,186,130,1,0,0,0,186,134,1,0,0,0,186,139,1,0,0,0,186,
        147,1,0,0,0,186,151,1,0,0,0,186,155,1,0,0,0,186,163,1,0,0,0,186,
        171,1,0,0,0,186,183,1,0,0,0,187,6,1,0,0,0,188,195,5,101,0,0,189,
        190,5,111,0,0,190,195,5,117,0,0,191,192,5,110,0,0,192,193,5,97,0,
        0,193,195,5,111,0,0,194,188,1,0,0,0,194,189,1,0,0,0,194,191,1,0,
        0,0,195,8,1,0,0,0,196,200,7,1,0,0,197,199,7,2,0,0,198,197,1,0,0,
        0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,10,1,0,0,0,
        202,200,1,0,0,0,203,207,5,34,0,0,204,206,9,0,0,0,205,204,1,0,0,0,
        206,209,1,0,0,0,207,208,1,0,0,0,207,205,1,0,0,0,208,210,1,0,0,0,
        209,207,1,0,0,0,210,211,5,34,0,0,211,12,1,0,0,0,212,224,5,62,0,0,
        213,214,5,62,0,0,214,224,5,61,0,0,215,224,5,60,0,0,216,217,5,60,
        0,0,217,224,5,61,0,0,218,219,5,60,0,0,219,224,5,62,0,0,220,221,5,
        60,0,0,221,224,5,45,0,0,222,224,5,61,0,0,223,212,1,0,0,0,223,213,
        1,0,0,0,223,215,1,0,0,0,223,216,1,0,0,0,223,218,1,0,0,0,223,220,
        1,0,0,0,223,222,1,0,0,0,224,14,1,0,0,0,225,226,7,3,0,0,226,16,1,
        0,0,0,227,229,7,4,0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,231,1,
        0,0,0,230,232,2,48,57,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,
        1,0,0,0,233,234,1,0,0,0,234,18,1,0,0,0,235,237,7,4,0,0,236,235,1,
        0,0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,240,2,48,57,0,239,238,
        1,0,0,0,240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,249,
        1,0,0,0,243,245,5,46,0,0,244,246,2,48,57,0,245,244,1,0,0,0,246,247,
        1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,243,
        1,0,0,0,249,250,1,0,0,0,250,20,1,0,0,0,251,252,5,58,0,0,252,22,1,
        0,0,0,253,254,5,40,0,0,254,24,1,0,0,0,255,256,5,41,0,0,256,26,1,
        0,0,0,257,258,5,44,0,0,258,28,1,0,0,0,259,260,5,46,0,0,260,261,5,
        46,0,0,261,30,1,0,0,0,262,263,5,94,0,0,263,32,1,0,0,0,264,265,5,
        38,0,0,265,34,1,0,0,0,14,0,38,46,186,194,200,207,223,228,233,236,
        241,247,249,1,6,0,0
    ]

class Jander(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    COMMENT = 2
    P_RES = 3
    OP_LOG = 4
    IDENT = 5
    CADEIA = 6
    OP_REL = 7
    OP_ARIT = 8
    NUM_INT = 9
    NUM_REAL = 10
    DELIM = 11
    ABREPAR = 12
    FECHAPAR = 13
    VIRGULA = 14
    INTERVALO = 15
    PONTEIRO = 16
    ENDERECO = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'('", "')'", "','", "'..'", "'^'", "'&'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "COMMENT", "P_RES", "OP_LOG", "IDENT", "CADEIA", "OP_REL", 
            "OP_ARIT", "NUM_INT", "NUM_REAL", "DELIM", "ABREPAR", "FECHAPAR", 
            "VIRGULA", "INTERVALO", "PONTEIRO", "ENDERECO" ]

    ruleNames = [ "WS", "COMMENT", "P_RES", "OP_LOG", "IDENT", "CADEIA", 
                  "OP_REL", "OP_ARIT", "NUM_INT", "NUM_REAL", "DELIM", "ABREPAR", 
                  "FECHAPAR", "VIRGULA", "INTERVALO", "PONTEIRO", "ENDERECO" ]

    grammarFileName = "Jander.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


