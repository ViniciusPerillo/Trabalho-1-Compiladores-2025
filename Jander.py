# Generated from Jander.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,163,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,
        0,4,0,29,8,0,11,0,12,0,30,1,0,1,0,1,1,1,1,5,1,37,8,1,10,1,12,1,40,
        9,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,100,8,2,1,3,1,3,
        5,3,104,8,3,10,3,12,3,107,9,3,1,4,3,4,110,8,4,1,4,4,4,113,8,4,11,
        4,12,4,114,1,5,3,5,118,8,5,1,5,4,5,121,8,5,11,5,12,5,122,1,5,1,5,
        4,5,127,8,5,11,5,12,5,128,3,5,131,8,5,1,6,1,6,5,6,135,8,6,10,6,12,
        6,138,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,152,
        8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,2,38,136,0,13,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        1,0,5,3,0,9,10,13,13,32,32,2,0,65,90,97,122,3,0,48,57,65,90,97,122,
        2,0,43,43,45,45,3,0,42,43,45,45,47,47,183,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,1,28,1,0,0,0,3,34,1,0,0,0,5,99,1,0,0,0,7,101,1,0,0,
        0,9,109,1,0,0,0,11,117,1,0,0,0,13,132,1,0,0,0,15,151,1,0,0,0,17,
        153,1,0,0,0,19,155,1,0,0,0,21,157,1,0,0,0,23,159,1,0,0,0,25,161,
        1,0,0,0,27,29,7,0,0,0,28,27,1,0,0,0,29,30,1,0,0,0,30,28,1,0,0,0,
        30,31,1,0,0,0,31,32,1,0,0,0,32,33,6,0,0,0,33,2,1,0,0,0,34,38,5,123,
        0,0,35,37,9,0,0,0,36,35,1,0,0,0,37,40,1,0,0,0,38,39,1,0,0,0,38,36,
        1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,0,41,42,5,125,0,0,42,43,1,0,0,
        0,43,44,6,1,0,0,44,4,1,0,0,0,45,46,5,97,0,0,46,47,5,108,0,0,47,48,
        5,103,0,0,48,49,5,111,0,0,49,50,5,114,0,0,50,51,5,105,0,0,51,52,
        5,116,0,0,52,53,5,109,0,0,53,100,5,111,0,0,54,55,5,102,0,0,55,56,
        5,105,0,0,56,57,5,109,0,0,57,58,5,95,0,0,58,59,5,97,0,0,59,60,5,
        108,0,0,60,61,5,103,0,0,61,62,5,111,0,0,62,63,5,114,0,0,63,64,5,
        105,0,0,64,65,5,116,0,0,65,66,5,109,0,0,66,100,5,111,0,0,67,68,5,
        100,0,0,68,69,5,101,0,0,69,70,5,99,0,0,70,71,5,108,0,0,71,72,5,97,
        0,0,72,73,5,114,0,0,73,100,5,101,0,0,74,75,5,108,0,0,75,76,5,101,
        0,0,76,77,5,105,0,0,77,100,5,97,0,0,78,79,5,101,0,0,79,80,5,115,
        0,0,80,81,5,99,0,0,81,82,5,114,0,0,82,83,5,101,0,0,83,84,5,118,0,
        0,84,100,5,97,0,0,85,86,5,105,0,0,86,87,5,110,0,0,87,88,5,116,0,
        0,88,89,5,101,0,0,89,90,5,105,0,0,90,91,5,114,0,0,91,100,5,111,0,
        0,92,93,5,108,0,0,93,94,5,105,0,0,94,95,5,116,0,0,95,96,5,101,0,
        0,96,97,5,114,0,0,97,98,5,97,0,0,98,100,5,108,0,0,99,45,1,0,0,0,
        99,54,1,0,0,0,99,67,1,0,0,0,99,74,1,0,0,0,99,78,1,0,0,0,99,85,1,
        0,0,0,99,92,1,0,0,0,100,6,1,0,0,0,101,105,7,1,0,0,102,104,7,2,0,
        0,103,102,1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,
        0,106,8,1,0,0,0,107,105,1,0,0,0,108,110,7,3,0,0,109,108,1,0,0,0,
        109,110,1,0,0,0,110,112,1,0,0,0,111,113,2,48,57,0,112,111,1,0,0,
        0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,10,1,0,0,0,
        116,118,7,3,0,0,117,116,1,0,0,0,117,118,1,0,0,0,118,120,1,0,0,0,
        119,121,2,48,57,0,120,119,1,0,0,0,121,122,1,0,0,0,122,120,1,0,0,
        0,122,123,1,0,0,0,123,130,1,0,0,0,124,126,5,46,0,0,125,127,2,48,
        57,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,1,0,
        0,0,129,131,1,0,0,0,130,124,1,0,0,0,130,131,1,0,0,0,131,12,1,0,0,
        0,132,136,5,34,0,0,133,135,9,0,0,0,134,133,1,0,0,0,135,138,1,0,0,
        0,136,137,1,0,0,0,136,134,1,0,0,0,137,139,1,0,0,0,138,136,1,0,0,
        0,139,140,5,34,0,0,140,14,1,0,0,0,141,152,5,62,0,0,142,143,5,62,
        0,0,143,152,5,61,0,0,144,152,5,60,0,0,145,146,5,60,0,0,146,152,5,
        61,0,0,147,148,5,60,0,0,148,152,5,62,0,0,149,150,5,60,0,0,150,152,
        5,45,0,0,151,141,1,0,0,0,151,142,1,0,0,0,151,144,1,0,0,0,151,145,
        1,0,0,0,151,147,1,0,0,0,151,149,1,0,0,0,152,16,1,0,0,0,153,154,7,
        4,0,0,154,18,1,0,0,0,155,156,5,58,0,0,156,20,1,0,0,0,157,158,5,40,
        0,0,158,22,1,0,0,0,159,160,5,41,0,0,160,24,1,0,0,0,161,162,5,44,
        0,0,162,26,1,0,0,0,13,0,30,38,99,105,109,114,117,122,128,130,136,
        151,1,6,0,0
    ]

class Jander(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    COMMENT = 2
    PRES = 3
    VARIAVEL = 4
    NUMINT = 5
    NUMREAL = 6
    LITERAL = 7
    OP_REL = 8
    OP_ARIT = 9
    DELIM = 10
    ABREPAR = 11
    FECHAPAR = 12
    VIRGULA = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'('", "')'", "','" ]

    symbolicNames = [ "<INVALID>",
            "WS", "COMMENT", "PRES", "VARIAVEL", "NUMINT", "NUMREAL", "LITERAL", 
            "OP_REL", "OP_ARIT", "DELIM", "ABREPAR", "FECHAPAR", "VIRGULA" ]

    ruleNames = [ "WS", "COMMENT", "PRES", "VARIAVEL", "NUMINT", "NUMREAL", 
                  "LITERAL", "OP_REL", "OP_ARIT", "DELIM", "ABREPAR", "FECHAPAR", 
                  "VIRGULA" ]

    grammarFileName = "Jander.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


